<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kConeAngleInFrontOfTvToFindObjects value="2.356194">
      <!--The arc/cone's angle for finding objects to sit/relax while watching TV. Units: Radians. Valid range [0, Pi]. Initial GPE Default: 3(Pi)/4.-->
    </kConeAngleInFrontOfTvToFindObjects>
    <kConeAngleInFrontOfTvToStandOrSitOnFloor value="1.178097">
      <!--The arc/cone's angle for finding a suitable spot for a sim that will stand and watch TV or sit down on floor and play video games. Units: Radians. Valid range [0, Pi]. Initial GPE Default: 3(Pi)/8.-->
    </kConeAngleInFrontOfTvToStandOrSitOnFloor>
    <kMaximumConeLengthToWatchTv value="15">
      <!--Maximum radius of the arc/cone (in front of the TV) to find contending objects to sit/relax or to stand. Positive float. Initial GPE default: 6f-->
    </kMaximumConeLengthToWatchTv>
    <kConeAngleInFrontOfSittableObjects value="1.570796">
      <!--The arc/cone's angle for a valid objects such that the TV is within this angle. Units: Radians. Valid range [0, Pi]. Initial GPE default: Pi/2-->
    </kConeAngleInFrontOfSittableObjects>
    <kMinimumDistanceToUseTv value="2">
      <!--Minimum radius for the arc/cone (in front of the TV). Positive float. Should be less than the max counterparts :p. Keep at least 0.5 to avoid the effects to intersect with sims.-->
    </kMinimumDistanceToUseTv>
    <kProportionOfConeLengthToWorkoutToStartJigSearch value="0.5">
      <!--Proportion of the kMaximumConeLengthToWorkout where the search for a workout position starts.  Valid range [0, 1].  Initial GPE default: 0.5-->
    </kProportionOfConeLengthToWorkoutToStartJigSearch>
    <kIntervalLengthToTestChannelSpecificBenefits value="5">
      <!--While the sim is looping in the Watch TV interaction, channel specific benefits will be tested only after this interval time. Positive int. Initial GPE value: 5-->
    </kIntervalLengthToTestChannelSpecificBenefits>
    <kCouchPotatoTraitFunMultiplier value="2">
      <!--Range: Positive floats above 1.0f.  Description: Multiplier for 'Couch Potato' Sims to gain fun when watching TV.-->
    </kCouchPotatoTraitFunMultiplier>
    <kAntiTVTraitTimeToGainDebuff value="10">
      <!--Range: Positive floats.  Description: Time in Sim Minutes for an 'Anti-Tv' Sim to get 'Anti-TV' buff from watching TV.-->
    </kAntiTVTraitTimeToGainDebuff>
    <kSoundGainLowLevel value="0.25">
      <!--Gain value for playing volume: Low. Positive float. Range [0, 1]. Initial GPE Default 0.25f-->
    </kSoundGainLowLevel>
    <kSoundGainMediumLevel value="0.6">
      <!--Gain value for playing volume: Medium. Positive float. Range [0, 1]. Initial GPE Default 0.60f-->
    </kSoundGainMediumLevel>
    <kSoundGainHighLevel value="1">
      <!--Gain value for playing volume: High. Positive float. Range [0, 1]. Initial GPE Default 1.0f-->
    </kSoundGainHighLevel>
    <kLookAtInterestingnessWhenTurnedOn value="20">
      <!--How interesting to look at this (range 0:100) when turned on-->
    </kLookAtInterestingnessWhenTurnedOn>
    <kLookAtInterestingnessWhenTurnedOff value="0">
      <!--How interesting to look at this (range 0:100) when turned off-->
    </kLookAtInterestingnessWhenTurnedOff>
    <kLookAtInterestingnessWhenWatching value="45">
      <!--How interesting to look at this (range 0:100) when your current interaction is watching it-->
    </kLookAtInterestingnessWhenWatching>
    <kNumMinutesToLookAtTVDuringSyncEvent value="6">
      <!--For how many minutes the TV is madly interesting during a sync-event (should correspond to the max length of the sync event animation)-->
    </kNumMinutesToLookAtTVDuringSyncEvent>
    <kRequiredFairySkillLevelRepair value="3">
      <!--Minimum fairy skill level requirement for the fairy repair interaction-->
    </kRequiredFairySkillLevelRepair>
    <kDisturbSimsBroadcasterParams>
      <PulseRadius value="3">
        <!--The effect range of the broadcaster in meters.-->
      </PulseRadius>
      <AffectBroadcasterRoomOnly value="True">
        <!--Specifies whether or not the broadcaster effects object through walls that define an enclosed room boundary.-->
      </AffectBroadcasterRoomOnly>
      <ReactorLineOfSight value="False">
        <!--Specifies whether or not the broadcaster only effects Sims with line-of-sight to the broadcasting object.-->
      </ReactorLineOfSight>
      <ReactorCouldSeeCheck value="False">
        <!--Specifies whether or not the broadcaster only effects Sims which pass a "could-see" check to the broadcasting object (i.e., they are not in their frontal vision cone but there are no objects between the two actors so the reactor could hypothetically see if they turned around).-->
      </ReactorCouldSeeCheck>
      <PulseRepeatTime value="20">
        <!--A repeat time in sim minutes with which a Sim is pulsed with the OnEnter effects of the broadcaster as long as they reside within the broadcaster's range.  A value of -1 means the pulse never repeats.-->
      </PulseRepeatTime>
      <TimeToFullPulseExpansion value="0">
        <!--The time in sim minutes over which the broadcaster range expands from 0 meters to the PulseRadius (the broadcaster range is instantaneously set to PulseRadius if zero minutes is specified).-->
      </TimeToFullPulseExpansion>
      <TimeDuration value="-1">
        <!--DO NOT TUNE a value of -1 unless you speak with the GPE first.  A value of -1 means that the broadcaster pulses until manually deleted by the scripter.  Otherwise it is the lifetime in sim minutes after which the broadcaster is deleted.-->
      </TimeDuration>
      <InteractionProhibitsOverlay value="False">
        <!--Setting InteractionProhibitsOverlay to true means that if the Sim chooses to use the interaction then the overlay is omitted.  I.e., either the interaction or the overlay is played but not both.-->
      </InteractionProhibitsOverlay>
      <AutonomyLevelToReact value="One">
        <!--The AutonomyLevel at which this reaction fires-->
      </AutonomyLevelToReact>
      <MaxSimsToProcessPerTick value="10">
        <!--The max number of sims that PulseSims will consider in one tick (the more we do, the less efficient (but more responsive) the reaction will be)-->
      </MaxSimsToProcessPerTick>
      <ReactOnRepeatedEntry value="True">
        <!--Whether or not the Sim will react anew to the broadcaster when exiting and re-entering the radius of the broadcaster. Do NOT tune to false if you have an ExitCallback or ExitInteraction.-->
      </ReactOnRepeatedEntry>
      <ReactToMultiplePulses value="True">
        <!--If true, your sim will be pulsed every time the broadcaster pulses.  Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </ReactToMultiplePulses>
      <SpeciesToEffect value="Human">
        <!--List of species flags that this reaction broadcaster should broadcast to.  Valid entries are Human, Horse, Cat, Dog, LittleDog or a comma separated list of several of these.-->
      </SpeciesToEffect>
      <MountedSimsDoNonMountedBehavior value="False">
        <!--If true, mounted sims will attempt to do the normal non-mounted behavior for this broadcaster while mounted. If true, this will cause the sim to ignore all other mounted reaction specific params. Note: This may or may not work! Test thoroughly when setting this to true.-->
      </MountedSimsDoNonMountedBehavior>
      <MountedReactToMultiplePulses value="False">
        <!--If true, your mounted sim will play the OnEnter MountedReactionType specified in MountedReactionTypes on every pulse. Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </MountedReactToMultiplePulses>
      <MountedReactionTypes value="None, None">
        <!--The MountedReactionType played by mounted horses and riders, instead of doing the normal behavior. If both enter and exit are set to none, mounted sims will not play a mounted reaction. What reaction to play when: [Entering the broadcaster (or initial pulse), exiting the broadcaster].-->
      </MountedReactionTypes>
    </kDisturbSimsBroadcasterParams>
    <sLookAtTuning>
      <SlotNameHashToLookAt value="">
        <!--ID of slot to look at (leave string empty for default LookAt slot)-->
      </SlotNameHashToLookAt>
      <LookAtInterestingness value="0">
        <!--Interestingness score (from 0 - 100) for looking at this type of object (this *must* be non-zero if you want the object to be added to the Room's LookAt list). (This can be overridden by the script's GetInterestingness function).-->
      </LookAtInterestingness>
      <DefaultInteractionLookAtThreshold value="45">
        <!--The default look-at threshold (-1 to ignore or a nonnegative number) for interactions on this object.  If set, a Sim will only look at other objects if that object's look-at score is above this limit.  45 (moving sims) and 145 (sims entering the room) are common values.-->
      </DefaultInteractionLookAtThreshold>
    </sLookAtTuning>
    <kMovieDurationInMinutes value="120">
      <!--Movie duration in minutes-->
    </kMovieDurationInMinutes>
    <kLtrBoostRate value="20">
      <!--LTR boost when watching TV together-->
    </kLtrBoostRate>
    <kEnvironmentTuning>
      <EnvironmentScore value="45">
        <!--Range: Any float value.  Description:  Each game object can define an environment score to contribute to the room environment score when Sims are in it.  It is expected that fancier, pretty objects will give a positive Environment score while dirty, ugly objects will give a negative Environment score.  The score contribution is defined by this tunable.-->
      </EnvironmentScore>
    </kEnvironmentTuning>
    <kActionAdventureClip value="Sims3TV_Action">
      <!--Clip for Action Adventure (see TV spreadsheet)-->
    </kActionAdventureClip>
    <kRomanticComedyClip value="Sims3TV_Wedding">
      <!--Clip for Romantic Comedy (see TV spreadsheet)-->
    </kRomanticComedyClip>
    <kComedyClip value="Sims3TV_Kids">
      <!--Clip for Comedy (see TV spreadsheet)-->
    </kComedyClip>
    <kHorrorClip value="Sims3TV_Horror">
      <!--Clip for Horror (see TV spreadsheet)-->
    </kHorrorClip>
    <kDramaClip value="Sims3TV_Casablana">
      <!--Clip for Drama (see TV spreadsheet)-->
    </kDramaClip>
  </Current_Tuning>
</base>