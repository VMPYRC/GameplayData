<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kFrankensteinReactionParams>
      <PulseRadius value="3">
        <!--The effect range of the broadcaster in meters.-->
      </PulseRadius>
      <AffectBroadcasterRoomOnly value="True">
        <!--Specifies whether or not the broadcaster effects object through walls that define an enclosed room boundary.-->
      </AffectBroadcasterRoomOnly>
      <ReactorLineOfSight value="False">
        <!--Specifies whether or not the broadcaster only effects Sims with line-of-sight to the broadcasting object.-->
      </ReactorLineOfSight>
      <PulseRepeatTime value="20">
        <!--A repeat time in sim minutes with which a Sim is pulsed with the OnEnter effects of the broadcaster as long as they reside within the broadcaster's range.  A value of -1 means the pulse never repeats.-->
      </PulseRepeatTime>
      <TimeToFullPulseExpansion value="0">
        <!--The time in sim minutes over which the broadcaster range expands from 0 meters to the PulseRadius (the broadcaster range is instantaneously set to PulseRadius if zero minutes is specified).-->
      </TimeToFullPulseExpansion>
      <TimeDuration value="-1">
        <!--DO NOT TUNE a value of -1 unless you speak with the GPE first.  A value of -1 means that the broadcaster pulses until manually deleted by the scripter.  Otherwise it is the lifetime in sim minutes after which the broadcaster is deleted.-->
      </TimeDuration>
      <InteractionProhibitsOverlay value="False">
        <!--Setting InteractionProhibitsOverlay to true means that if the Sim chooses to use the interaction then the overlay is omitted.  I.e., either the interaction or the overlay is played but not both.-->
      </InteractionProhibitsOverlay>
      <AutonomyLevelToReact value="One">
        <!--The AutonomyLevel at which this reaction fires-->
      </AutonomyLevelToReact>
      <MaxSimsToProcessPerTick value="10">
        <!--The max number of sims that PulseSims will consider in one tick (the more we do, the less efficient (but more responsive) the reaction will be)-->
      </MaxSimsToProcessPerTick>
      <ReactOnRepeatedEntry value="True">
        <!--Whether or not the Sim will react anew to the broadcaster when exiting and re-entering the radius of the broadcaster. Do NOT tune to false if you have an ExitCallback or ExitInteraction.-->
      </ReactOnRepeatedEntry>
      <ReactToMultiplePulses value="True">
        <!--If true, your sim will be pulsed every time the broadcaster pulses.  Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </ReactToMultiplePulses>
      <SpeciesToEffect value="Human">
        <!--List of species flags that this reaction broadcaster should broadcast to.  Valid entries are Human, Horse, Cat, Dog, LittleDog or a comma separated list of several of these.-->
      </SpeciesToEffect>
      <ReactorCouldSeeCheck value="False">
        <!--Specifies whether or not the broadcaster only effects Sims which pass a "could-see" check to the broadcasting object (i.e., they are not in their frontal vision cone but there are no objects between the two actors so the reactor could hypothetically see if they turned around).-->
      </ReactorCouldSeeCheck>
      <MountedSimsDoNonMountedBehavior value="False">
        <!--If true, mounted sims will attempt to do the normal non-mounted behavior for this broadcaster while mounted. If true, this will cause the sim to ignore all other mounted reaction specific params. Note: This may or may not work! Test thoroughly when setting this to true.-->
      </MountedSimsDoNonMountedBehavior>
      <MountedReactToMultiplePulses value="False">
        <!--If true, your mounted sim will play the OnEnter MountedReactionType specified in MountedReactionTypes on every pulse. Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </MountedReactToMultiplePulses>
      <MountedReactionTypes value="Surprised, None">
        <!--The MountedReactionType played by mounted horses and riders, instead of doing the normal behavior. If both enter and exit are set to none, mounted sims will not play a mounted reaction. What reaction to play when: [Entering the broadcaster (or initial pulse), exiting the broadcaster].-->
      </MountedReactionTypes>
    </kFrankensteinReactionParams>
    <kMinMoodFrankensteinReactionPositive value="0">
      <!--Minimum value the Sim's mood must be to do a positive Frankenstein reaction.-->
    </kMinMoodFrankensteinReactionPositive>
    <kHandinessSkillMin value="5">
      <!--Minimum value for Frankenstein's handiness skill.-->
    </kHandinessSkillMin>
    <kHandinessSkillMax value="8">
      <!--Max value for Frankenstein's handiness skill.-->
    </kHandinessSkillMax>
    <kShortOutAlarmMin value="15">
      <!--Time: Minutes.  Minimum number of minutes between checks to see if Frankenstein should short out.-->
    </kShortOutAlarmMin>
    <kShortOutAlarmMax value="60">
      <!--Time: Minutes.  Max number of minutes between checks to see if Frankenstein should short out.-->
    </kShortOutAlarmMax>
    <kShortOutAlarmShortOutChance value="0.1">
      <!--Percentage. Valid Range: 0.0 - 100. The precent chance a Frankenstein will short out when we check every X minutes.-->
    </kShortOutAlarmShortOutChance>
    <kShortOutAlarmShortOutModifierUnlucky value="0.5">
      <!--This value is added to kShortOutAlarmShortOutChance if the Sim is Unlucky.-->
    </kShortOutAlarmShortOutModifierUnlucky>
    <kShortOutAlarmShortOutModifierBadMood value="2.0">
      <!--This value is added to kShortOutAlarmShortOutChance if the Sim's mood is below kShortOutAlarmShortOutBadMood.-->
    </kShortOutAlarmShortOutModifierBadMood>
    <kShortOutAlarmShortOutBadMood value="-50">
      <!--When a Sim's mood is <= to this value, it will be added to kShortOutAlarmShortOutChance.-->
    </kShortOutAlarmShortOutBadMood>
    <kInventingSkillMin value="2">
      <!--Minimum value for Frankenstein's inventing skill.-->
    </kInventingSkillMin>
    <kInventingSkillMax value="5">
      <!--Max value for Frankenstein's inventing skill.-->
    </kInventingSkillMax>
    <kEnergyWhenInPool value="-90">
      <!--SimBot's energy will be set to this value when it first enters a pool.-->
    </kEnergyWhenInPool>
    <kRequiredHandinessForSimBotRepair value="3">
      <!--Skill level in handiness needed to repair a SimBot.-->
    </kRequiredHandinessForSimBotRepair>
  </Current_Tuning>
</base>