<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kTerrariumTuning>
      <FillFoodCost value="15">
        <!--How much it costs to fill the terrarium's food.-->
      </FillFoodCost>
      <NumFoodServings value="4">
        <!--How many times the pet can eat from a full food supply before it becomes empty.-->
      </NumFoodServings>
      <IntervalToIncreaseDirtiness value="3">
        <!--Interval, in Sim hours, at which we increase the dirty state, provided there are pets in the terrarium. Specify the dirtiness increase in the Cleanable tuning.-->
      </IntervalToIncreaseDirtiness>
      <ConeRouteAngleInFrontOfTerrarium value="1.178097">
        <!--The arc/cone's angle for finding a suitable spot for a Sim that will either watch or take a pet from the terrarium. Units: Radians. Valid range [0, Pi]. Initial GPE Default: 3(Pi)/8.-->
      </ConeRouteAngleInFrontOfTerrarium>
      <kMournReactionBroadcasterParams>
        <PulseRadius value="10">
          <!--The effect range of the broadcaster in meters.-->
        </PulseRadius>
        <AffectBroadcasterRoomOnly value="False">
          <!--Specifies whether or not the broadcaster effects object through walls that define an enclosed room boundary.-->
        </AffectBroadcasterRoomOnly>
        <ReactorLineOfSight value="False">
          <!--Specifies whether or not the broadcaster only effects Sims with line-of-sight to the broadcasting object.-->
        </ReactorLineOfSight>
        <ReactorCouldSeeCheck value="False">
          <!--Specifies whether or not the broadcaster only effects Sims which pass a "could-see" check to the broadcasting object (i.e., they are not in their frontal vision cone but there are no objects between the two actors so the reactor could hypothetically see if they turned around).-->
        </ReactorCouldSeeCheck>
        <PulseRepeatTime value="30">
          <!--A repeat time in sim minutes with which a Sim is pulsed with the OnEnter effects of the broadcaster as long as they reside within the broadcaster's range.  A value of -1 means the pulse never repeats.-->
        </PulseRepeatTime>
        <TimeToFullPulseExpansion value="0">
          <!--The time in sim minutes over which the broadcaster range expands from 0 meters to the PulseRadius (the broadcaster range is instantaneously set to PulseRadius if zero minutes is specified).-->
        </TimeToFullPulseExpansion>
        <TimeDuration value="-1">
          <!--DO NOT TUNE a value of -1 unless you speak with the GPE first.  A value of -1 means that the broadcaster pulses until manually deleted by the scripter.  Otherwise it is the lifetime in sim minutes after which the broadcaster is deleted.-->
        </TimeDuration>
        <InteractionProhibitsOverlay value="False">
          <!--Setting InteractionProhibitsOverlay to true means that if the Sim chooses to use the interaction then the overlay is omitted.  I.e., either the interaction or the overlay is played but not both.-->
        </InteractionProhibitsOverlay>
        <AutonomyLevelToReact value="Three">
          <!--The AutonomyLevel at which this reaction fires-->
        </AutonomyLevelToReact>
        <MaxSimsToProcessPerTick value="10">
          <!--The max number of sims that PulseSims will consider in one tick (the more we do, the less efficient (but more responsive) the reaction will be)-->
        </MaxSimsToProcessPerTick>
        <ReactOnRepeatedEntry value="False">
          <!--Whether or not the Sim will react anew to the broadcaster when exiting and re-entering the radius of the broadcaster. Do NOT tune to false if you have an ExitCallback or ExitInteraction.-->
        </ReactOnRepeatedEntry>
        <ReactToMultiplePulses value="True">
          <!--If true, your sim will be pulsed every time the broadcaster pulses.  Set to false if you only want to be pulsed once per time entering the broadcaster.-->
        </ReactToMultiplePulses>
        <SpeciesToEffect value="Human,Horse,Cat,Dog,LittleDog">
          <!--List of species flags that this reaction broadcaster should broadcast to.  Valid entries are Human, Horse, Cat, Dog, LittleDog or a comma separated list of several of these.-->
        </SpeciesToEffect>
        <MountedSimsDoNonMountedBehavior value="False">
          <!--If true, mounted sims will attempt to do the normal non-mounted behavior for this broadcaster while mounted. If true, this will cause the sim to ignore all other mounted reaction specific params. Note: This may or may not work! Test thoroughly when setting this to true.-->
        </MountedSimsDoNonMountedBehavior>
        <MountedReactToMultiplePulses value="False">
          <!--If true, your mounted sim will play the OnEnter MountedReactionType specified in MountedReactionTypes on every pulse. Set to false if you only want to be pulsed once per time entering the broadcaster.-->
        </MountedReactToMultiplePulses>
        <MountedReactionTypes value="None, None">
          <!--The MountedReactionType played by mounted horses and riders, instead of doing the normal behavior. If both enter and exit are set to none, mounted sims will not play a mounted reaction. What reaction to play when: [Entering the broadcaster (or initial pulse), exiting the broadcaster].-->
        </MountedReactionTypes>
      </kMournReactionBroadcasterParams>
    </kTerrariumTuning>
    <kCleanableTuning>
      <PristineCleanValue value="30">
        <!--The value given when cleaning is completed by a neat Sim.  Should be greater than 0 which is what otehr sims clean to.-->
      </PristineCleanValue>
      <ChangeToDirtyState value="-30">
        <!--Dirty level (Dirty Level range is -100 to 0)that will turn on the model's dirty state.-->
      </ChangeToDirtyState>
      <ChangeToVeryDirtyState value="-60">
        <!--Dirty level that will turn on the model's very dirty state.-->
      </ChangeToVeryDirtyState>
      <DirtyIncPerUse value="2">
        <!--The amount that get's subtracted from the dirty level each time the object is used.-->
      </DirtyIncPerUse>
      <DirtyThreshold value="-25">
        <!--Dirty level of the object when Clean becomes available.-->
      </DirtyThreshold>
      <CleanDirtyDecPerMinute value="4">
        <!--The amount that gets added to the dirty level every minute while cleaning.-->
      </CleanDirtyDecPerMinute>
      <UpgradeSelfCleaning>
        <UpgradeTime value="15">
          <!--The amount of time it takes to do the upgrade in minutes-->
        </UpgradeTime>
        <SkillGainRate value="5">
          <!--Skill points gained when for one upgrade.  We figure out your progress from 0-1 and multiply by this to give you skill points.-->
        </SkillGainRate>
        <BadFailureChance value="20">
          <!--Range: 0 to 100 float, The chance IF a regular failure occurs, that it is a bad failure-->
        </BadFailureChance>
        <ShouldShockInPuddle value="False">
          <!--Set to True if the object should shock the Sim if sim is standing in a puddle during upgrade.  False otherwise-->
        </ShouldShockInPuddle>
      </UpgradeSelfCleaning>
    </kCleanableTuning>
    <kSpeechBalloonsSquawk value="ep5_balloon_bird, balloon_chips, balloon_flower">
      <!--Speech balloon set for speech type Squawk-->
    </kSpeechBalloonsSquawk>
    <kSpeechBalloonsHappy value="balloon_butterflies, balloon_bff, balloon_partyballoons, ep5_balloon_catalinamacaw, ep5_balloon_cockatoo, ep5_balloon_nuthatch, balloon_clown, balloon_moodlet_brightenedDay,  balloon_moodlet_cheeredUp, balloon_moodlet_delighted, balloon_moodlet_excited, balloon_sunshine ">
      <!--Speech balloon set for speech type Happy-->
    </kSpeechBalloonsHappy>
    <kSpeechBalloonsGreetings value="balloon_butterflies, balloon_bff, balloon_partyballoons">
      <!--Speech balloon set for speech type Greetings-->
    </kSpeechBalloonsGreetings>
    <kSpeechBalloonsLove value="balloon_heart, balloon_hearts, balloon_roses, balloon_date, balloon_engagement, balloon_lips, balloon_moodlet_firstRomance, balloon_moodlet_firstKiss, balloon_moodlet_great_kisser, balloon_moodlet_myLove, balloon_flower ">
      <!--Speech balloon set for speech type Love-->
    </kSpeechBalloonsLove>
    <kSpeechBalloonsAngry value="balloon_trait_grumpy, balloon_trait_meanspirited, balloon_smelly, balloon_moodlet_enemy, balloon_moodlet_disgusted, balloon_moodlet_offended, balloon_moodlet_upset, balloon_moodlet_veryAngry, balloon_trait_evil">
      <!--Speech balloon set for speech type Angry-->
    </kSpeechBalloonsAngry>
    <kSpeechBalloonsScared value="balloon_death, balloon_flames, ep5_balloon_cats, ep5_balloon_shark, ep5_balloon_snake, ep5_balloon_trick_speak, ep5_foxes, ep5_pet_stone_angry, ep5_balloon_vacuumcleaner, ep3_balloon_bats, ep3_balloon_fangs, ep1_balloon_mummy, balloon_dragon, balloon_ghost, balloon_lochness, balloon_moodlet_creepyGraveyard, balloon_moodlet_full, balloon_moodlet_scared, balloon_yeti   ">
      <!--Speech balloon set for speech type Scared-->
    </kSpeechBalloonsScared>
    <kSpeechBalloonsSongs value="balloon_musicnotes, balloon_sheetmusic, balloon_conductor, balloon_cd, balloon_discoball, balloon_moodlet_sawGreatSymphony, balloon_moodlet_theatreMusic, balloon_trait_virtuoso, balloon_trait_childish, balloon_moodlet_enjoyingMusic">
      <!--Speech balloon set for speech type Songs-->
    </kSpeechBalloonsSongs>
  </Current_Tuning>
</base>