<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kPercentChanceOfSimDancing value="40">
      <!--Percent chance of a Sim dancing during a show. Positive int with range of 0 to 100.-->
    </kPercentChanceOfSimDancing>
    <kPercentChanceOfFailingEngageTheAudience value="33">
      <!--Percent chance of a Sim failing the Engage The Audience interaction. Positive int with range of 0 to 100.-->
    </kPercentChanceOfFailingEngageTheAudience>
    <kSuccessfulEngageTheAudienceAmount value=".025">
      <!--Amount to increase PerformanceMeter by for successful Engage The Audience interaction. Positive float with range of 0 to 1.0.-->
    </kSuccessfulEngageTheAudienceAmount>
    <kFailedEngageTheAudienceAmount value=".05">
      <!--Amount to decrease PerformanceMeter by for failed Engage The Audience interaction. Positive float with range of 0 to 1.0.-->
    </kFailedEngageTheAudienceAmount>
    <kBuyARoundBroadcasterParams>
      <PulseRadius value="3">
        <!--The effect range of the broadcaster in meters.-->
      </PulseRadius>
      <AffectBroadcasterRoomOnly value="True">
        <!--Specifies whether or not the broadcaster effects object through walls that define an enclosed room boundary.-->
      </AffectBroadcasterRoomOnly>
      <ReactorLineOfSight value="False">
        <!--Specifies whether or not the broadcaster only effects Sims with line-of-sight to the broadcasting object.-->
      </ReactorLineOfSight>
      <ReactorCouldSeeCheck value="False">
        <!--Specifies whether or not the broadcaster only effects Sims which pass a "could-see" check to the broadcasting object (i.e., they are not in their frontal vision cone but there are no objects between the two actors so the reactor could hypothetically see if they turned around).-->
      </ReactorCouldSeeCheck>
      <PulseRepeatTime value="20">
        <!--A repeat time in sim minutes with which a Sim is pulsed with the OnEnter effects of the broadcaster as long as they reside within the broadcaster's range.  A value of -1 means the pulse never repeats.-->
      </PulseRepeatTime>
      <TimeToFullPulseExpansion value="0">
        <!--The time in sim minutes over which the broadcaster range expands from 0 meters to the PulseRadius (the broadcaster range is instantaneously set to PulseRadius if zero minutes is specified).-->
      </TimeToFullPulseExpansion>
      <TimeDuration value="-1">
        <!--DO NOT TUNE a value of -1 unless you speak with the GPE first.  A value of -1 means that the broadcaster pulses until manually deleted by the scripter.  Otherwise it is the lifetime in sim minutes after which the broadcaster is deleted.-->
      </TimeDuration>
      <InteractionProhibitsOverlay value="False">
        <!--Setting InteractionProhibitsOverlay to true means that if the Sim chooses to use the interaction then the overlay is omitted.  I.e., either the interaction or the overlay is played but not both.-->
      </InteractionProhibitsOverlay>
      <AutonomyLevelToReact value="One">
        <!--The AutonomyLevel at which this reaction fires-->
      </AutonomyLevelToReact>
      <MaxSimsToProcessPerTick value="10">
        <!--The max number of sims that PulseSims will consider in one tick (the more we do, the less efficient (but more responsive) the reaction will be)-->
      </MaxSimsToProcessPerTick>
      <ReactOnRepeatedEntry value="True">
        <!--Whether or not the Sim will react anew to the broadcaster when exiting and re-entering the radius of the broadcaster. Do NOT tune to false if you have an ExitCallback or ExitInteraction.-->
      </ReactOnRepeatedEntry>
      <ReactToMultiplePulses value="True">
        <!--If true, your sim will be pulsed every time the broadcaster pulses.  Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </ReactToMultiplePulses>
      <SpeciesToEffect value="Human">
        <!--List of species flags that this reaction broadcaster should broadcast to.  Valid entries are Human, Horse, Cat, Dog, LittleDog or a comma separated list of several of these.-->
      </SpeciesToEffect>
      <MountedSimsDoNonMountedBehavior value="False">
        <!--If true, mounted sims will attempt to do the normal non-mounted behavior for this broadcaster while mounted. If true, this will cause the sim to ignore all other mounted reaction specific params. Note: This may or may not work! Test thoroughly when setting this to true.-->
      </MountedSimsDoNonMountedBehavior>
      <MountedReactToMultiplePulses value="False">
        <!--If true, your mounted sim will play the OnEnter MountedReactionType specified in MountedReactionTypes on every pulse. Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </MountedReactToMultiplePulses>
      <MountedReactionTypes value="None, None">
        <!--The MountedReactionType played by mounted horses and riders, instead of doing the normal behavior. If both enter and exit are set to none, mounted sims will not play a mounted reaction. What reaction to play when: [Entering the broadcaster (or initial pulse), exiting the broadcaster].-->
      </MountedReactionTypes>
    </kBuyARoundBroadcasterParams>
    <kAmountToWaitBeforePushingAutonomousAction value="15">
      <!--Amount to time wait before pushing a performance interaction upon the Sim. Value in Sim Minutes.-->
    </kAmountToWaitBeforePushingAutonomousAction>
    <kTimeBetweenDeliveryAttempts value="3">
      <!--Default: 3min.  This is the minimum time between allowing the delivery interaction to all sims on the lot.-->
    </kTimeBetweenDeliveryAttempts>
    <kCostPerDrink value="5">
      <!--Default: 5.  Cost per drink for ordering drins/buying a round in the venue-->
    </kCostPerDrink>
    <kPerformanceValueToGetGenieLamp value="Legendary">
      <!--Performance level in order to receive a genie lamp as a gift.  Default Legendary-->
    </kPerformanceValueToGetGenieLamp>
    <kTimeBeforePerformanceGiftGenieLamp value="20">
      <!--Time before you can receive another genie lamp from a performance.  Default:  20 days-->
    </kTimeBeforePerformanceGiftGenieLamp>
    <kProprietorDefaultStartTime value="6">
      <!--Range:  0+  Description:  The default time a proprietor starts to work, unless the venue specifies an opening time-->
    </kProprietorDefaultStartTime>
    <kProprietorDefaultEndTime value="24">
      <!--Range:  0+  Description:  The default time a proprietor stops working, unless the venue specifies a closing time-->
    </kProprietorDefaultEndTime>
    <kChanceToEngageTheAudience value="5">
      <!--When autonomously performing a show, Sim will be this likely to EngageTheAudience.  Percent chance, 0 to 100.-->
    </kChanceToEngageTheAudience>
    <kPerformanceDuelAwardMoney value="250">
      <!--Default: 20.  The Amount of money awarded to the winner of a performance duel challenge-->
    </kPerformanceDuelAwardMoney>
    <kNumChatWithAudience value="2">
      <!--Max number of chat before cool down resets-->
    </kNumChatWithAudience>
    <kChatWithAudienceCoolDown value="15">
      <!--Cool down of chat with audience: Sim minutes-->
    </kChatWithAudienceCoolDown>
    <kPerformanceIncChat value="0.01">
      <!--Performance meter increment for Chat-->
    </kPerformanceIncChat>
    <kPerformanceDecChat value="0.02">
      <!--Performance meter decrease for Chat-->
    </kPerformanceDecChat>
    <kAutonomousThrowChance value="0.001">
      <!--Range:  0.0 - 1.0f  Description:  Chance that a Sim will throw stuff autonomously. GPE Default: 0.05f (5%)-->
    </kAutonomousThrowChance>
    <kShouldThrowAutonomously value="True">
      <!--Range:  true/false  Description:  Should Sims throw stuff autonomously? GPE Default: true-->
    </kShouldThrowAutonomously>
    <kMinDJPullAudience value="5">
      <!--Min. number of Sims to pull to the audience for a DJ mini show-->
    </kMinDJPullAudience>
    <kMaxDJPullAudience value="10">
      <!--Max. number of Sims to pull to the audience for a DJ mini show-->
    </kMaxDJPullAudience>
    <kTimeBetweenAudienceRequestTrick value="31">
      <!--Time in minutes between performance requests from people watching.  Default:  31min-->
    </kTimeBetweenAudienceRequestTrick>
    <kTimeAudienceRequestTrickIsValid value="30">
      <!--Time audience request for trick is valid, default 30 minutes-->
    </kTimeAudienceRequestTrickIsValid>
    <kLTRBoostForNotPlayingTrick value="0">
      <!--LTR performance hit for not playing the trick requested.  Default -10-->
    </kLTRBoostForNotPlayingTrick>
    <kMeterBoostForNotPlayingTrick value="-.004">
      <!--Performance meter hit for not playing the trick requested.  Default -10-->
    </kMeterBoostForNotPlayingTrick>
    <kLTRBoostForPlayingTrick value="1">
      <!--LTR performance bonus for playing the trick requested.  Default 10-->
    </kLTRBoostForPlayingTrick>
    <kMeterBoostForPlayingTrick value=".01">
      <!--Performance meter bonus for playing the trick requested.  Default 10-->
    </kMeterBoostForPlayingTrick>
    <kMinutesToIdleAfterRespondToShow value="15">
      <!--Number of Sim Minutes after player uses RespondToShow that Sim will ignore performance level events-->
    </kMinutesToIdleAfterRespondToShow>
    <kSingAlongDuration value="20">
      <!--Duration of the Singing Along action of RespondToShow in Sim Minutes-->
    </kSingAlongDuration>
    <kAutonomousRequestChance value="1.0">
      <!--Range:  0.0 - 1.0f  Description:  Chance that a Sim will request autonomously. GPE Default: 0.05f (5%)-->
    </kAutonomousRequestChance>
    <kShouldRequestAutonomously value="True">
      <!--Range:  true/false  Description:  Should Sims request tricks autonomously? GPE Default: true-->
    </kShouldRequestAutonomously>
    <kChanceOfCowardStageFright value="50">
      <!--Range: 0-100f  Description: Chance a sim with coward trait will get stage fright-->
    </kChanceOfCowardStageFright>
    <kPerformanceInsultChatPenalty value="0.5">
      <!--Performance meter flat decrease for insult crowd-->
    </kPerformanceInsultChatPenalty>
    <kTimeBetweenNPCAudienceRequestTrickTests value="5">
      <!--Time in minutes between tests by the NPC spectators to decide if they will request a trick. Starts only once Audience Requests are allowed-->
    </kTimeBetweenNPCAudienceRequestTrickTests>
    <kTimeBeforeSimFestContestantIsDisqualified value="10">
      <!--Range: 5.0-15.0f The number of minutes between the moment a SimFest Performer is announced and the moment he is disqualified. This is also used as the time before the emcee starts to monitor the performance so DO NOT go higher than 15 minutes.-->
    </kTimeBeforeSimFestContestantIsDisqualified>
    <kWaitTimeAfterPushingWaitForDrink value="10">
      <!--Default: 10min.  This is the time you wait after pushing wait during a delivery attempt to a sim on the lot.-->
    </kWaitTimeAfterPushingWaitForDrink>
  </Current_Tuning>
</base>