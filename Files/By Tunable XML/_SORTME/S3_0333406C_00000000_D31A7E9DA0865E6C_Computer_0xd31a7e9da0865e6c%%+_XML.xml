<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kUpgradeGraphicsTuning>
      <UpgradeTime value="400">
        <!--The amount of time it takes to do the upgrade in minutes-->
      </UpgradeTime>
      <SkillGainRate value="7600">
        <!--Skill points gained when for one upgrade.  We figure out your progress from 0-1 and multiply by this to give you skill points.-->
      </SkillGainRate>
      <BadFailureChance value="15">
        <!--Range: 0 to 100 float, The chance IF a regular failure occurs, that it is a bad failure-->
      </BadFailureChance>
      <ShouldShockInPuddle value="True">
        <!--Set to True if the object should shock the Sim if sim is standing in a puddle during upgrade.  False otherwise-->
      </ShouldShockInPuddle>
    </kUpgradeGraphicsTuning>
    <sLookAtTuning>
      <SlotNameHashToLookAt value="">
        <!--ID of slot to look at (leave string empty for default LookAt slot)-->
      </SlotNameHashToLookAt>
      <LookAtInterestingness value="1">
        <!--Interestingness score (from 0 - 100) for looking at this type of object (this *must* be non-zero if you want the object to be added to the Room's LookAt list). (This can be overridden by the script's GetInterestingness function).-->
      </LookAtInterestingness>
      <!--deprecated on: 4/4/2008 11:33:51 AM-->
      <DefaultInteractionLookAtThreshold value="45">
        <!--The default look-at threshold (-1 to ignore or a nonnegative number) for interactions on this object.  If set, a Sim will only look at other objects if that object's look-at score is above this limit.  45 (moving sims) and 145 (sims entering the room) are common values.-->
      </DefaultInteractionLookAtThreshold>
    </sLookAtTuning>
    <kTimeToWaitToEvict value="15">
      <!--Time to wait to evict a lower priority Sim from this object, in Sim minutes-->
    </kTimeToWaitToEvict>
    <kWritingNovelPointsPerHour value="500">
      <!--Skill points earned per hour of writing a novel.-->
    </kWritingNovelPointsPerHour>
    <kMaxLenghtForBookName value="60">
      <!--Max Character allowed for naming a book-->
    </kMaxLenghtForBookName>
    <kMinDistanceToMoveAwayWhenFinished value="1">
      <!--The minimum distance a sim will move away when finished computing-->
    </kMinDistanceToMoveAwayWhenFinished>
    <kMaxDistanceToMoveAwayWhenFinished value="10">
      <!--The maximum distance a sim will move away when finished computing-->
    </kMaxDistanceToMoveAwayWhenFinished>
    <kTechnophobeTraitMaximumChatTime value="50">
      <!--Range:  Sim minutes.  Description:  Maximum amount of time that a Technophobe Sim will chat on the computer.-->
    </kTechnophobeTraitMaximumChatTime>
    <kTechnophobeTraitMaximumGameTime value="20">
      <!--Range:  Sim minutes.  Description:  Maximum amount of time that a Technophobe Sim will play computer games.-->
    </kTechnophobeTraitMaximumGameTime>
    <kHackingSkillGainPerMinute value="10">
      <!--Hacking skill gain per minute-->
    </kHackingSkillGainPerMinute>
    <kWritingScreenplayPointsPerHour value="400">
      <!--Writing skill points earned per hour of writing a screenplay.-->
    </kWritingScreenplayPointsPerHour>
    <kBoobyTrapTuning>
      <IsLooping value="True">
        <!--Does the 'set trap' animation loop?.-->
      </IsLooping>
      <LoopMinutes value="10">
        <!--If IsLooping, how long the loop should play in Sim minutes before the trap is set.-->
      </LoopMinutes>
      <PositivePrankTraits value="GoodSenseOfHumor, Friendly, Insane">
        <!--If a Sim has any of these traits, they will receive the positive Pranked buff when they trigger the trap.-->
      </PositivePrankTraits>
      <SetBoobyTrapBroadcasterParams>
        <PulseRadius value="3">
          <!--The effect range of the broadcaster in meters.-->
        </PulseRadius>
        <AffectBroadcasterRoomOnly value="True">
          <!--Specifies whether or not the broadcaster effects object through walls that define an enclosed room boundary.-->
        </AffectBroadcasterRoomOnly>
        <ReactorLineOfSight value="False">
          <!--Specifies whether or not the broadcaster only effects Sims with line-of-sight to the broadcasting object.-->
        </ReactorLineOfSight>
        <PulseRepeatTime value="1">
          <!--A repeat time in sim minutes with which a Sim is pulsed with the OnEnter effects of the broadcaster as long as they reside within the broadcaster's range.  A value of -1 means the pulse never repeats.-->
        </PulseRepeatTime>
        <TimeToFullPulseExpansion value="0">
          <!--The time in sim minutes over which the broadcaster range expands from 0 meters to the PulseRadius (the broadcaster range is instantaneously set to PulseRadius if zero minutes is specified).-->
        </TimeToFullPulseExpansion>
        <TimeDuration value="-1">
          <!--DO NOT TUNE a value of -1 unless you speak with the GPE first.  A value of -1 means that the broadcaster pulses until manually deleted by the scripter.  Otherwise it is the lifetime in sim minutes after which the broadcaster is deleted.-->
        </TimeDuration>
        <InteractionProhibitsOverlay value="False">
          <!--Setting InteractionProhibitsOverlay to true means that if the Sim chooses to use the interaction then the overlay is omitted.  I.e., either the interaction or the overlay is played but not both.-->
        </InteractionProhibitsOverlay>
        <AutonomyLevelToReact value="One">
          <!--The AutonomyLevel at which this reaction fires-->
        </AutonomyLevelToReact>
        <MaxSimsToProcessPerTick value="10">
          <!--The max number of sims that PulseSims will consider in one tick (the more we do, the less efficient (but more responsive) the reaction will be)-->
        </MaxSimsToProcessPerTick>
        <ReactOnRepeatedEntry value="True">
          <!--Whether or not the Sim will react anew to the broadcaster when exiting and re-entering the radius of the broadcaster. Do NOT tune to false if you have an ExitCallback or ExitInteraction.-->
        </ReactOnRepeatedEntry>
        <ReactToMultiplePulses value="True">
          <!--If true, your sim will be pulsed every time the broadcaster pulses.  Set to false if you only want to be pulsed once per time entering the broadcaster.-->
        </ReactToMultiplePulses>
        <SpeciesToEffect value="Human">
          <!--List of species flags that this reaction broadcaster should broadcast to.  Valid entries are Human, Horse, Cat, Dog, LittleDog or a comma separated list of several of these.-->
        </SpeciesToEffect>
        <ReactorCouldSeeCheck value="False">
          <!--Specifies whether or not the broadcaster only effects Sims which pass a "could-see" check to the broadcasting object (i.e., they are not in their frontal vision cone but there are no objects between the two actors so the reactor could hypothetically see if they turned around).-->
        </ReactorCouldSeeCheck>
        <MountedSimsDoNonMountedBehavior value="True">
          <!--If true, mounted sims will attempt to do the normal non-mounted behavior for this broadcaster while mounted. If true, this will cause the sim to ignore all other mounted reaction specific params. Note: This may or may not work! Test thoroughly when setting this to true.-->
        </MountedSimsDoNonMountedBehavior>
        <MountedReactToMultiplePulses value="False">
          <!--If true, your mounted sim will play the OnEnter MountedReactionType specified in MountedReactionTypes on every pulse. Set to false if you only want to be pulsed once per time entering the broadcaster.-->
        </MountedReactToMultiplePulses>
        <MountedReactionTypes value="None, None">
          <!--The MountedReactionType played by mounted horses and riders, instead of doing the normal behavior. If both enter and exit are set to none, mounted sims will not play a mounted reaction. What reaction to play when: [Entering the broadcaster (or initial pulse), exiting the broadcaster].-->
        </MountedReactionTypes>
      </SetBoobyTrapBroadcasterParams>
    </kBoobyTrapTuning>
    <kRequiredFairySkillLevelRepair value="3">
      <!--Minimum fairy skill level requirement for the fairy repair interaction-->
    </kRequiredFairySkillLevelRepair>
  </Current_Tuning>
  <Deprecated_Tuning>
    <kPlayGamesFunIncPerHour value="40">
      <!--deprecated on: 1/25/2008 6:44:22 PM-->
    </kPlayGamesFunIncPerHour>
    <kFindJobNumJobsOpportunitiesPerDay value="5">
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kFindJobNumJobsOpportunitiesPerDay>
    <kWorkAtHomePerformanceIncPerHour value="5">
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kWorkAtHomePerformanceIncPerHour>
    <kHackGetPaidEveryXMinutes value="30">
      <!--The base number of minutes between hacking payouts-->
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kHackGetPaidEveryXMinutes>
    <kHackPayTimeVariance value="5">
      <!--A random number of minutes added to the base to provide variance in pay times-->
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kHackPayTimeVariance>
    <kHackMinPay value="15">
      <!--The min amount of money hacking can pay.-->
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kHackMinPay>
    <kHackMaxPay value="31">
      <!--The max amount hacking can pay.-->
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kHackMaxPay>
    <kHackChanceOfBonus value="5">
      <!--The chance per payout that there will be a large bonus.-->
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kHackChanceOfBonus>
    <kHackBonusMultiplier value="3">
      <!--If the bonus chance is met, this is the multiplier applied to the normal pay.-->
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kHackBonusMultiplier>
    <kHackPercentPayIncreasePerLevelOfHackingSkill value="0.03">
      <!--When the amount of pay is calculated using, this number is is multiplied by your current skill level and that percent is added to the total pay.-->
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kHackPercentPayIncreasePerLevelOfHackingSkill>
    <kFindJobNumMinutesBetweenOffer value="2">
      <!--deprecated on: 3/14/2008 1:55:31 PM-->
    </kFindJobNumMinutesBetweenOffer>
  </Deprecated_Tuning>
</base>