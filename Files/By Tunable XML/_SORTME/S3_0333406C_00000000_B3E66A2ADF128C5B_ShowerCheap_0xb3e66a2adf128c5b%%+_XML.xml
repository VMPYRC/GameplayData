<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kEnvironmentTuning>
      <EnvironmentScore value="0">
        <!--Range: Any float value.  Description:  Each game object can define an environment score to contribute to the room environment score when Sims are in it.  It is expected that fancier, pretty objects will give a positive Environment score while dirty, ugly objects will give a negative Environment score.  The score contribution is defined by this tunable.-->
      </EnvironmentScore>
    </kEnvironmentTuning>
    <kCleanableTuning>
      <ChangeToDirtyState value="-40">
        <!--Dirty level (Dirty Level range is -100 to 0)that will turn on the model's dirty state.-->
      </ChangeToDirtyState>
      <ChangeToVeryDirtyState value="-60">
        <!--Dirty level that will turn on the model's very dirty state.-->
      </ChangeToVeryDirtyState>
      <DirtyIncPerUse value="5">
        <!--The amount that get's subtracted from the dirty level each time the object is used.-->
      </DirtyIncPerUse>
      <DirtyThreshold value="-25">
        <!--Dirty level of the object when Clean becomes available.-->
      </DirtyThreshold>
      <CleanDirtyDecPerMinute value="4">
        <!--The amount that gets added to the dirty level every minute while cleaning.-->
      </CleanDirtyDecPerMinute>
      <UpgradeSelfCleaning>
        <UpgradeTime value="240">
          <!--The amount of time it takes to do the upgrade in minutes-->
        </UpgradeTime>
        <SkillGainRate value="2640">
          <!--Skill points gained when for one upgrade.  We figure out your progress from 0-1 and multiply by this to give you skill points.-->
        </SkillGainRate>
        <BadFailureChance value="50">
          <!--Range: 0 to 100 float, The chance IF a regular failure occurs, that it is a bad failure-->
        </BadFailureChance>
        <ShouldShockInPuddle value="False">
          <!--Set to True if the object should shock the Sim if sim is standing in a puddle during upgrade.  False otherwise-->
        </ShouldShockInPuddle>
      </UpgradeSelfCleaning>
      <PristineCleanValue value="30">
        <!--The value given when cleaning is completed by a neat Sim.  Should be greater than 0 which is what otehr sims clean to.-->
      </PristineCleanValue>
    </kCleanableTuning>
    <kRepairableTuning>
      <HoursUnbreakable value="48">
        <!--How long until the object is allowed to check for breakage after being fixed or purchased.-->
      </HoursUnbreakable>
      <StartPercentChanceBreak value="0">
        <!--Starting chance of object breaking when its used.-->
      </StartPercentChanceBreak>
      <PercentChanceBreakIncrease value="0">
        <!--How much the chance of breakage increases each time the object is used (int, 1 to 100).-->
      </PercentChanceBreakIncrease>
      <PercentWhenReplaceAvailable value="15">
        <!--What percent breakage chance the Replace interaction becomes available-->
      </PercentWhenReplaceAvailable>
      <RepairComplexity value="1">
        <!--The level at which repair time reaches its minimum-->
      </RepairComplexity>
      <MinRepairTime value="15">
        <!--Minimum amount of time in sim minutes that it takes to repair this object.  This time when skill level at or above RepairComplexity-->
      </MinRepairTime>
      <MaxRepairTime value="90">
        <!--Maximum amount of time in sim minutes that it takes to repair this object.  Occurs at skill level 0.-->
      </MaxRepairTime>
      <RepairSkillGain value="1000">
        <!--Rate of skill gain while repairing object in points per sim minute-->
      </RepairSkillGain>
      <UpgradeUnbreakable>
        <UpgradeTime value="240">
          <!--The amount of time it takes to do the upgrade in minutes-->
        </UpgradeTime>
        <SkillGainRate value="3600">
          <!--Skill points gained when for one upgrade.  We figure out your progress from 0-1 and multiply by this to give you skill points.-->
        </SkillGainRate>
        <BadFailureChance value="50">
          <!--Range: 0 to 100 float, The chance IF a regular failure occurs, that it is a bad failure-->
        </BadFailureChance>
        <ShouldShockInPuddle value="False">
          <!--Set to True if the object should shock the Sim if sim is standing in a puddle during upgrade.  False otherwise-->
        </ShouldShockInPuddle>
      </UpgradeUnbreakable>
      <MinChanceOfElectrocution value="0">
        <!--Minimum percent chance between 0 and 100 that the sim will get electrocuted when doing a repair.  Should only be set > 0 for electrical objects. Occurs when skill level > = RepairComplexity-->
      </MinChanceOfElectrocution>
      <MaxChanceOfElectrocution value="0">
        <!--Maximum percent chance between 0 and 100 that the sim will get electrocuted when doing a repair.  Should only be set > 0 for electrical objects. Occurs at skill level 0.-->
      </MaxChanceOfElectrocution>
    </kRepairableTuning>
    <kShowerTuning>
      <ChanceOfExhileratingShowerBuff value="0">
        <!--Percent chance 0-100 of the sim getting the ExhileratingShowerBuff when taking a shower-->
      </ChanceOfExhileratingShowerBuff>
      <ChanceOfSinging value="10">
        <!--Percent chance 0-100 of a sim without virtuoso or outgoing trait singing in the shower-->
      </ChanceOfSinging>
    </kShowerTuning>
    <kPuddleTuning>
      <MaxNumPuddles value="10" />
      <SpawnSpeedInMinutes value="45">
        <!--Speed of puddle spawn in Sim Minutes.-->
      </SpawnSpeedInMinutes>
    </kPuddleTuning>
  </Current_Tuning>
  <Deprecated_Tuning>
    <UpgradeComplexity value="1">
      <!--The initial level a Sim can perform an upgrade.  Also the level when he has the max chance of failure-->
      <!--deprecated on: 1/7/2008 7:09:09 PM-->
    </UpgradeComplexity>
    <UpgradeComplexity value="1">
      <!--The initial level a Sim can perform an upgrade.  Also the level when he has the max chance of failure-->
      <!--deprecated on: 1/7/2008 7:09:09 PM-->
    </UpgradeComplexity>
    <ObsessedWithComputerTraitScore value="0">
      <!--Range: Any float value.  Description:  Sims with the 'Obsessed with X' Trait will get an environment bonus from rooms that contain the object that Sim is obsessed with.  This tunable is an additive amount of environment bonus for Sims with the 'Obsessed with X' trait. This amount is expected to be positive but does not have to be.-->
      <!--deprecated on: 1/16/2008 11:52:02 AM-->
    </ObsessedWithComputerTraitScore>
    <ObsessedWithTVTraitScore value="0">
      <!--Range: Any float value.  Description:  Sims with the 'Obsessed with X' Trait will get an environment bonus from rooms that contain the object that Sim is obsessed with.  This tunable is an additive amount of environment bonus for Sims with the 'Obsessed with X' trait. This amount is expected to be positive but does not have to be.-->
      <!--deprecated on: 1/16/2008 11:52:02 AM-->
    </ObsessedWithTVTraitScore>
    <CleanHygieneLossPerMinute value="5">
      <!--How much hygiene the Sim will lose per minute while cleaning.-->
      <!--deprecated on: 1/28/2008 2:42:00 PM-->
    </CleanHygieneLossPerMinute>
    <NumSimMinutesPerDirtyPulse value="10">
      <!--Number of sim minutes between pulses of the Dirty ReactionBroadcaster-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </NumSimMinutesPerDirtyPulse>
    <DirtyBroadcasterStartRadius value="100">
      <!--Start Radius of Dirty ReactionBroadcaster-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </DirtyBroadcasterStartRadius>
    <DirtyBroadcasterEndRadius value="100">
      <!--End Radius of Dirty ReactionBroadcaster-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </DirtyBroadcasterEndRadius>
    <DirtyBroadcasterTimeToFullPulseExpansion value="5">
      <!--Number of sim minutes until Dirty ReactionBroadcaster becomes full-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </DirtyBroadcasterTimeToFullPulseExpansion>
    <NumSimMinutesPerBrokenPulse value="10">
      <!--Number of sim minutes between pulses of the Broken ReactionBroadcaster-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </NumSimMinutesPerBrokenPulse>
    <BrokenBroadcasterStartRadius value="100">
      <!--Start Radius of Broken ReactionBroadcaster-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </BrokenBroadcasterStartRadius>
    <BrokenBroadcasterEndRadius value="100">
      <!--End Radius of Broken ReactionBroadcaster-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </BrokenBroadcasterEndRadius>
    <BrokenBroadcasterTimeToFullPulseExpansion value="5">
      <!--Number of sim minutes until Broken ReactionBroadcaster becomes full-->
      <!--deprecated on: 2/7/2008 11:40:00 AM-->
    </BrokenBroadcasterTimeToFullPulseExpansion>
  </Deprecated_Tuning>
</base>