<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kEnergyMoodModifier value="1">
      <!--Positive float.  How important Energy is to determining a bird's mood.-->
    </kEnergyMoodModifier>
    <kHungerMoodModifier value="4">
      <!--Positive float.  How important Hunger is to determining a bird's mood.-->
    </kHungerMoodModifier>
    <kBadMoodThreshold value="180">
      <!--Positive float.  The value under which a bird is in a bad mood.-->
    </kBadMoodThreshold>
    <kVeryHungryThreshold value="10">
      <!--Int in range 1 - 100.  The Hunger value under which a bird is considered very hungry.-->
    </kVeryHungryThreshold>
    <kSpeechTypeIncrementPerTalk value="0.4, 0.4, 20">
      <!--The number of points the talk progress will incerement per talk.  First number is talking, second number is songs, third number is sounds (doorbell, phone).-->
    </kSpeechTypeIncrementPerTalk>
    <kMinMaxChanceForSuccessfulSpeech value="20, 100">
      <!--The min/max chance for a bird to successfully say a given speech type. Modified by the amount learned of that speech type. 0.0 - 100.0f-->
    </kMinMaxChanceForSuccessfulSpeech>
    <kChanceToTalkWhileIdle value="0.15">
      <!--The chance for the bird to say some random words, or squawk if there are no known words. During Idle. 0.0 - 1.0-->
    </kChanceToTalkWhileIdle>
    <kPathLengthTuningRoaming>
      <fTotalLengthTarget value="15">
        <!--The target total length of the run around path in meters.-->
      </fTotalLengthTarget>
      <fSubPathLengthMin value="3">
        <!--The minimum length of a sub path in meters.-->
      </fSubPathLengthMin>
      <fSubPathLengthMax value="5">
        <!--The maximum length of a sub path in meters.-->
      </fSubPathLengthMax>
      <fSubPathDirectionChangeConeAngleDegrees value="120">
        <!--The maximum angle deviation of a sub path in degrees.-->
      </fSubPathDirectionChangeConeAngleDegrees>
    </kPathLengthTuningRoaming>
    <kPathLengthTuningCircular>
      <fTotalLengthTarget value="15">
        <!--The target total length of the run around path in meters.-->
      </fTotalLengthTarget>
      <fSubPathLengthMin value="3">
        <!--The minimum length of a sub path in meters.-->
      </fSubPathLengthMin>
      <fSubPathLengthMax value="5">
        <!--The maximum length of a sub path in meters.-->
      </fSubPathLengthMax>
      <fSubPathDirectionChangeConeAngleDegrees value="120">
        <!--The maximum angle deviation of a sub path in degrees.-->
      </fSubPathDirectionChangeConeAngleDegrees>
    </kPathLengthTuningCircular>
    <kPhoneRingRadiusForHearing value="25">
      <!--The radius around a phone ring at which a bird can hear it.-->
    </kPhoneRingRadiusForHearing>
    <kMinorPetTuning>
      <CaptureRouteRange value="0.5, 1">
        <!--The distance range used when routing to the pet to capture it.-->
      </CaptureRouteRange>
      <BehaviorAlarmCallbackFrequency value="5">
        <!--How many Sim minutes between alarm callbacks.  This should be kept relatively low so the animation states can be checked frequently.-->
      </BehaviorAlarmCallbackFrequency>
      <BehaviorAlarmCallbackHungerRange value="1.5, 1.75">
        <!--The hunger a pet will lose with each alarm callback.  Hunger's range is 0 - 100.-->
      </BehaviorAlarmCallbackHungerRange>
      <BehaviorAlarmCallbackEnergyLossRange value="1, 1.2">
        <!--The energy a pet will lose with each alarm callback.  Energy's range is 0 - 100.-->
      </BehaviorAlarmCallbackEnergyLossRange>
      <BehaviorAlarmCallbackEnergyGainRange value="3, 3.5">
        <!--The energy a pet will gain while sleeping with each alarm callback.-->
      </BehaviorAlarmCallbackEnergyGainRange>
      <BehaviorAlarmCallbackChanceToMoveAround value="0.25">
        <!--If the pet is idle, the chance per alarm callback will enter the 'move around' state.  This should be higher for pets that should appear more active.-->
      </BehaviorAlarmCallbackChanceToMoveAround>
      <BehaviorAlarmCallbackChanceToReturnToIdle value="0.10">
        <!--If the pet is moving around, the chance per alarm callback they will return to idling.  If BehaviorAlarmCallbackMoveAroundTimeLimit has been met, they will ignore this chance.-->
      </BehaviorAlarmCallbackChanceToReturnToIdle>
      <BehaviorAlarmCallbackMoveAroundTimeLimit value="15">
        <!--The max amount of time the pet can be in the 'move around' state.  This should be >= BehaviorAlarmCallbackFrequency and will also be ignored if pet becomes hungry or sleep.-->
      </BehaviorAlarmCallbackMoveAroundTimeLimit>
      <InInventoryRunawayTime value="720">
        <!--If the pet has remained in a Sim's inventory for this many minutes, there is a chance the pet will 'run away' with each alarm callback.-->
      </InInventoryRunawayTime>
      <InInventoryRunawayChance value="10">
        <!--The percent chance the pet will run away.-->
      </InInventoryRunawayChance>
      <BaseLifetimeRange value="12, 15">
        <!--The base lifetime for the pet type.  Aside from starvation, the pet be guaranteed to live a random number of days within this range.-->
      </BaseLifetimeRange>
      <ExtendedLifetimeRange value="2, 3">
        <!--After the pet's base lifetime has passed, the pet will live a random number of days within this range.  If the pet is carried or played with, this range will reset allowing the pet to live eternally.-->
      </ExtendedLifetimeRange>
      <AnimalExpertLifetimeRange value="3, 5">
        <!--If sim has the animal expert trait, add life span to caged animal-->
      </AnimalExpertLifetimeRange>
      <StarvationThreshold value="2">
        <!--The number of days the pet can live without food.-->
      </StarvationThreshold>
      <StarvationExtraDayForAnimalExpert value="2">
        <!--The extra number of days the pet can live without food, if sim has the animal expert trait-->
      </StarvationExtraDayForAnimalExpert>
      <EscapeTimeBeforeMovement value="10">
        <!--Minimum number of minutes a pet will stay in the same position before attempting to move.-->
      </EscapeTimeBeforeMovement>
      <EscapeChangeRoomChance value="0.25">
        <!--The chance a pet will move to a different room.-->
      </EscapeChangeRoomChance>
      <EscapeTimeBeforeDestruction value="12">
        <!--Number of hours a pet can be escaped before we destroy them.  A value of -1 will let them wander about forever.-->
      </EscapeTimeBeforeDestruction>
      <BehaviorAlarmCallbackChanceToApproachGlass value="0.65">
        <!--If the pet is idle, the chance per alarm callback will enter the 'approach glass' state.  This is a relatively short animation that has the pet approach and return to the idle position.  This should be higher for pets that should appear more active.-->
      </BehaviorAlarmCallbackChanceToApproachGlass>
    </kMinorPetTuning>
    <kChanceToRepeatDoorbell value="0.5">
      <!--The chance a bird will repeat the doorbell sound after hearing it. 0.0 - 1.0-->
    </kChanceToRepeatDoorbell>
    <kChanceToRepeatPhoneRing value="0.5">
      <!--The chance a bird will repeat the phone ring sound after hearing it. 0.0 - 1.0f-->
    </kChanceToRepeatPhoneRing>
    <kChanceToAnswerDoor value="0.7">
      <!--The chance a sim will answer the door when a bird makes a doorbell sound. 0.0 - 1.0f-->
    </kChanceToAnswerDoor>
    <kChanceToAnswerPhone value="0.7">
      <!--The chance a sim will answer the phone when a bird makes the phone ringing sound. 0.0 - 1.0f-->
    </kChanceToAnswerPhone>
    <kRadiusAroundBirdToSingToMusic value="5">
      <!--The radius around a bird to check for music playing. 0.0+-->
    </kRadiusAroundBirdToSingToMusic>
    <kLTRLikingToNotFlyAway value="40">
      <!--The LTR Liking at which point the bird will not fly away when outside. 0.0+-->
    </kLTRLikingToNotFlyAway>
    <kGoodMoodThreshold value="350">
      <!--Positive float.  The value above which a bird is in a good mood.-->
    </kGoodMoodThreshold>
    <kSimMinutesToSing value="15">
      <!--The amount of time, in sim minutes, a bird should sing if it starts because of an idle talk. 0.0+-->
    </kSimMinutesToSing>
    <kDirtyLevelBeforeAngryTalk value="-60">
      <!--The dirtiness level of the bird's terrarium before the bird will say angry things. -100.0 - 0.0 (-100 is the dirtiest of the dirty. 0 is Cleany McSunshine)-->
    </kDirtyLevelBeforeAngryTalk>
    <kReactToNonhouseholdSimBroadcasterParams>
      <PulseRadius value="6">
        <!--The effect range of the broadcaster in meters.-->
      </PulseRadius>
      <AffectBroadcasterRoomOnly value="True">
        <!--Specifies whether or not the broadcaster effects object through walls that define an enclosed room boundary.-->
      </AffectBroadcasterRoomOnly>
      <ReactorLineOfSight value="False">
        <!--Specifies whether or not the broadcaster only effects Sims with line-of-sight to the broadcasting object.-->
      </ReactorLineOfSight>
      <ReactorCouldSeeCheck value="False">
        <!--Specifies whether or not the broadcaster only effects Sims which pass a "could-see" check to the broadcasting object (i.e., they are not in their frontal vision cone but there are no objects between the two actors so the reactor could hypothetically see if they turned around).-->
      </ReactorCouldSeeCheck>
      <PulseRepeatTime value="20">
        <!--A repeat time in sim minutes with which a Sim is pulsed with the OnEnter effects of the broadcaster as long as they reside within the broadcaster's range.  A value of -1 means the pulse never repeats.-->
      </PulseRepeatTime>
      <TimeToFullPulseExpansion value="0">
        <!--The time in sim minutes over which the broadcaster range expands from 0 meters to the PulseRadius (the broadcaster range is instantaneously set to PulseRadius if zero minutes is specified).-->
      </TimeToFullPulseExpansion>
      <TimeDuration value="-1">
        <!--DO NOT TUNE a value of -1 unless you speak with the GPE first.  A value of -1 means that the broadcaster pulses until manually deleted by the scripter.  Otherwise it is the lifetime in sim minutes after which the broadcaster is deleted.-->
      </TimeDuration>
      <InteractionProhibitsOverlay value="False">
        <!--Setting InteractionProhibitsOverlay to true means that if the Sim chooses to use the interaction then the overlay is omitted.  I.e., either the interaction or the overlay is played but not both.-->
      </InteractionProhibitsOverlay>
      <AutonomyLevelToReact value="One">
        <!--The AutonomyLevel at which this reaction fires-->
      </AutonomyLevelToReact>
      <MaxSimsToProcessPerTick value="10">
        <!--The max number of sims that PulseSims will consider in one tick (the more we do, the less efficient (but more responsive) the reaction will be)-->
      </MaxSimsToProcessPerTick>
      <ReactOnRepeatedEntry value="True">
        <!--Whether or not the Sim will react anew to the broadcaster when exiting and re-entering the radius of the broadcaster. Do NOT tune to false if you have an ExitCallback or ExitInteraction.-->
      </ReactOnRepeatedEntry>
      <ReactToMultiplePulses value="True">
        <!--If true, your sim will be pulsed every time the broadcaster pulses.  Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </ReactToMultiplePulses>
      <SpeciesToEffect value="Human">
        <!--List of species flags that this reaction broadcaster should broadcast to.  Valid entries are Human, Horse, Cat, Dog, LittleDog or a comma separated list of several of these.-->
      </SpeciesToEffect>
      <MountedSimsDoNonMountedBehavior value="False">
        <!--If true, mounted sims will attempt to do the normal non-mounted behavior for this broadcaster while mounted. If true, this will cause the sim to ignore all other mounted reaction specific params. Note: This may or may not work! Test thoroughly when setting this to true.-->
      </MountedSimsDoNonMountedBehavior>
      <MountedReactToMultiplePulses value="False">
        <!--If true, your mounted sim will play the OnEnter MountedReactionType specified in MountedReactionTypes on every pulse. Set to false if you only want to be pulsed once per time entering the broadcaster.-->
      </MountedReactToMultiplePulses>
      <MountedReactionTypes value="None, None">
        <!--The MountedReactionType played by mounted horses and riders, instead of doing the normal behavior. If both enter and exit are set to none, mounted sims will not play a mounted reaction. What reaction to play when: [Entering the broadcaster (or initial pulse), exiting the broadcaster].-->
      </MountedReactionTypes>
    </kReactToNonhouseholdSimBroadcasterParams>
    <kRadiusToCheckForTvReactions value="15">
      <!--The radius around the bird to check for TVs playing necessary channels for bird reactions (Romance/Scary channels). 0.0+-->
    </kRadiusToCheckForTvReactions>
  </Current_Tuning>
</base>