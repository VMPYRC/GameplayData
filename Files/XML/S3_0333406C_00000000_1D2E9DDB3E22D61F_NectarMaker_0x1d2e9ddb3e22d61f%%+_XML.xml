<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kRepairableTuning>
      <HoursUnbreakable value="84">
        <!--How long until the object is allowed to check for breakage after being fixed or purchased.-->
      </HoursUnbreakable>
      <StartPercentChanceBreak value="2">
        <!--Starting chance of object breaking when its used.-->
      </StartPercentChanceBreak>
      <PercentChanceBreakIncrease value="1">
        <!--How much the chance of breakage increases each time the object is used (int, 1 to 100).-->
      </PercentChanceBreakIncrease>
      <PercentWhenReplaceAvailable value="100">
        <!--What percent breakage chance the Replace interaction becomes available-->
      </PercentWhenReplaceAvailable>
      <RepairComplexity value="8">
        <!--The level at which repair time reaches its minimum-->
      </RepairComplexity>
      <MinRepairTime value="25">
        <!--Minimum amount of time in sim minutes that it takes to repair this object.  This time when skill level at or above RepairComplexity-->
      </MinRepairTime>
      <MaxRepairTime value="120">
        <!--Maximum amount of time in sim minutes that it takes to repair this object.  Occurs at skill level 0.-->
      </MaxRepairTime>
      <RepairSkillGain value="2100">
        <!--Rate of skill gain while repairing object in points per sim minute-->
      </RepairSkillGain>
      <UpgradeUnbreakable>
        <UpgradeTime value="240">
          <!--The amount of time it takes to do the upgrade in minutes-->
        </UpgradeTime>
        <SkillGainRate value="3600">
          <!--Skill points gained when for one upgrade.  We figure out your progress from 0-1 and multiply by this to give you skill points.-->
        </SkillGainRate>
        <BadFailureChance value="50">
          <!--Range: 0 to 100 float, The chance IF a regular failure occurs, that it is a bad failure-->
        </BadFailureChance>
        <ShouldShockInPuddle value="True">
          <!--Set to True if the object should shock the Sim if sim is standing in a puddle during upgrade.  False otherwise-->
        </ShouldShockInPuddle>
      </UpgradeUnbreakable>
      <MinChanceOfElectrocution value="10">
        <!--Minimum percent chance between 0 and 100 that the sim will get electrocuted when doing a repair.  Should only be set > 0 for electrical objects. Occurs when skill level > = RepairComplexity-->
      </MinChanceOfElectrocution>
      <MaxChanceOfElectrocution value="50">
        <!--Maximum percent chance between 0 and 100 that the sim will get electrocuted when doing a repair.  Should only be set > 0 for electrical objects. Occurs at skill level 0.-->
      </MaxChanceOfElectrocution>
    </kRepairableTuning>
    <kUpgradeFlavorEnhancement>
      <UpgradeTime value="400">
        <!--The amount of time it takes to do the upgrade in minutes-->
      </UpgradeTime>
      <SkillGainRate value="8800">
        <!--Skill points gained when for one upgrade.  We figure out your progress from 0-1 and multiply by this to give you skill points.-->
      </SkillGainRate>
      <BadFailureChance value="20">
        <!--Range: 0 to 100 float, The chance IF a regular failure occurs, that it is a bad failure-->
      </BadFailureChance>
      <ShouldShockInPuddle value="True">
        <!--Set to True if the object should shock the Sim if sim is standing in a puddle during upgrade.  False otherwise-->
      </ShouldShockInPuddle>
    </kUpgradeFlavorEnhancement>
    <kUpgradeImprovedPressing>
      <UpgradeTime value="400">
        <!--The amount of time it takes to do the upgrade in minutes-->
      </UpgradeTime>
      <SkillGainRate value="6400">
        <!--Skill points gained when for one upgrade.  We figure out your progress from 0-1 and multiply by this to give you skill points.-->
      </SkillGainRate>
      <BadFailureChance value="20">
        <!--Range: 0 to 100 float, The chance IF a regular failure occurs, that it is a bad failure-->
      </BadFailureChance>
      <ShouldShockInPuddle value="True">
        <!--Set to True if the object should shock the Sim if sim is standing in a puddle during upgrade.  False otherwise-->
      </ShouldShockInPuddle>
    </kUpgradeImprovedPressing>
    <kMaxFruitInNectar value="10">
      <!--Maximum number of fruit to put in a nectar.-->
    </kMaxFruitInNectar>
    <kNumBottlesPerBatch value="3">
      <!--Base number of bottles to be made in each batch- modified by upgrades-->
    </kNumBottlesPerBatch>
    <kImprovedFlavorMultiplier value="1.15">
      <!--Value multiplier improved flavor success-->
    </kImprovedFlavorMultiplier>
    <kImprovedFlavorFailMultiplier value=".75">
      <!--Value multiplier improved flavor bad fail-->
    </kImprovedFlavorFailMultiplier>
    <kImprovedPressingBottles value="1">
      <!--bottle difference improved pressing success-->
    </kImprovedPressingBottles>
    <kImprovedPressingFailBottles value="-1">
      <!--bottle difference improved pressing bad fail-->
    </kImprovedPressingFailBottles>
    <kMaxComboMultiplier value="1.75">
      <!--Max multiplier that can result from fruit combinations-->
    </kMaxComboMultiplier>
    <kMinGlobalValueVariance value="0.332">
      <!--minimum global value variance-->
    </kMinGlobalValueVariance>
    <kMaxGlobalValueVariance value="0.334">
      <!--maximum global value variance-->
    </kMaxGlobalValueVariance>
    <kLevel10Multiplier value="1.5">
      <!--multiplier for nectar value at skill level 10-->
    </kLevel10Multiplier>
    <kQualityLevelMultiplier value="0.2, 0.3, 0.4, 0.6, 1 ,1.15, 1.3, 1.5, 1.75, 2.05, 2.5">
      <!--value multiplier by average quality level-->
    </kQualityLevelMultiplier>
    <kLevel0Multiplier value="0.75">
      <!--multiplier for nectar value at skill level 0-->
    </kLevel0Multiplier>
    <kSquishGrapesTimeMinutes value="30">
      <!--Amount of time to squish grapes in minutes-->
    </kSquishGrapesTimeMinutes>
    <kPushButtonTimeMinutes value="30">
      <!--Amount of time to push buttons in minutes for the make nectar interaction-->
    </kPushButtonTimeMinutes>
    <kMachineRunTimeMinutes value="120">
      <!--Amount of time for the machine to run in minutes for the make nectar interaction-->
    </kMachineRunTimeMinutes>
    <kMinComboMultiplier value="0.5">
      <!--Min multiplier that can result from fruit combinations-->
    </kMinComboMultiplier>
    <kPoorComboThreshold value="0.9">
      <!--Threshold for poor nectar combination (terribly is anything below this)-->
    </kPoorComboThreshold>
    <kWellComboThreshold value="1.1">
      <!--Threshold for well nectar combination-->
    </kWellComboThreshold>
    <kGreatComboThreshold value="1.3">
      <!--Threshold for great nectar combination-->
    </kGreatComboThreshold>
    <kAmazingComboThreshold value="1.5">
      <!--Threshold for amazing nectar combination-->
    </kAmazingComboThreshold>
    <kPuddleTuning>
      <MaxNumPuddles value="4" />
      <SpawnSpeedInMinutes value="45">
        <!--Speed of puddle spawn in Sim Minutes.-->
      </SpawnSpeedInMinutes>
    </kPuddleTuning>
    <kConcentratedUnlockLevel value="4">
      <!--Nectar skill level at which Make Concentrated becomes available-->
    </kConcentratedUnlockLevel>
    <kMassProduceUnlockLevel value="7">
      <!--Nectar skill level at which Mass Produce becomes available-->
    </kMassProduceUnlockLevel>
    <kExtendedNectarationUnlockLevel value="9">
      <!--Nectar skill level at which Extended Nectaration becomes available-->
    </kExtendedNectarationUnlockLevel>
    <kConcentratedValueMultiplier value="1.25">
      <!--Make Concentrated- value multiplier-->
    </kConcentratedValueMultiplier>
    <kConcentratedBottleChange value="-1">
      <!--Make Concentrated- bottle diff-->
    </kConcentratedBottleChange>
    <kMassProduceValueMultiplier value="0.75">
      <!--Mass Produce- value multiplier-->
    </kMassProduceValueMultiplier>
    <kMassProduceBottleChange value="2">
      <!--Mass Produce- bottle diff-->
    </kMassProduceBottleChange>
    <kExtendedNectarationValueMultiplier value="1.15">
      <!--Extended Nectaration- value multiplier-->
    </kExtendedNectarationValueMultiplier>
    <kExtendedNectarationTimeMultiplier value="1.5">
      <!--Extended Nectaration- time multiplier-->
    </kExtendedNectarationTimeMultiplier>
    <kAvgTNSThreshold value=".9">
      <!--Threshold for shwoing a TNS saying the nectar combo will be approx neutral (poor TNS will show for anything below this)-->
    </kAvgTNSThreshold>
    <kGoodTNSThreshold value="1.1">
      <!--Threshold for shwoing a TNS saying the nectar combo will be Good-->
    </kGoodTNSThreshold>
    <kMedianComboMultiplier value="1">
      <!--Median multiplier that can result from fruit combinations-->
    </kMedianComboMultiplier>
    <kRequiredFairySkillLevelRepair value="3">
      <!--Minimum fairy skill level requirement for the fairy repair interaction-->
    </kRequiredFairySkillLevelRepair>
  </Current_Tuning>
</base>