<?xml version="1.0" encoding="utf-8"?>
<base>
  <Current_Tuning>
    <kVisitRabbitHoleTuning>
      <VisitLength value="60">
        <!--Visit length in minutes.-->
      </VisitLength>
      <VisitBoredomChanceChild value="10">
        <!--Visit chance for boredom child.-->
      </VisitBoredomChanceChild>
      <VisitBoredomChanceTeen value="35">
        <!--Visit chance for boredom teen.-->
      </VisitBoredomChanceTeen>
      <VisitBoredomChanceAdult value="10">
        <!--Visit chance for boredom adult/edler.-->
      </VisitBoredomChanceAdult>
      <VisitWooHooLength value="30">
        <!--Visit woohoo length in minutes.-->
      </VisitWooHooLength>
      <VisitWooHooCheckForCaught value="5">
        <!--Visit woohoo check for being caught every X minutes.-->
      </VisitWooHooCheckForCaught>
      <VisitWooHooChanceForCaught value="2">
        <!--Visit woohoo chance of being caught when 'VisitWooHooCheckForCaught' is hit.-->
      </VisitWooHooChanceForCaught>
      <VisitTryForBabySuccessRate value="0">
        <!--Visit try for baby chance of success.-->
      </VisitTryForBabySuccessRate>
      <VisitTourGroupLTRGain value="2">
        <!--Amount of LTR gain between people on a tour group every X minutes-->
      </VisitTourGroupLTRGain>
      <VisitTourGroupMinutesLTR value="20">
        <!--Frequency of LTR gain while on a tour group-->
      </VisitTourGroupMinutesLTR>
      <WooHooingCommodity value="Amorous">
        <!--Social STC after WooHooing.-->
      </WooHooingCommodity>
      <WooHooingSTCIncrement value="35">
        <!--The STC increment after WooHooing.-->
      </WooHooingSTCIncrement>
      <WooHooingLTRIncrement value="5">
        <!--The LTR increment after WooHooing.-->
      </WooHooingLTRIncrement>
      <WooHooingFunDelta value="80">
        <!--The Fun delta while WooHooing.-->
      </WooHooingFunDelta>
      <WooHooingSocialDelta value="125">
        <!--The Social delta while WooHooing.-->
      </WooHooingSocialDelta>
    </kVisitRabbitHoleTuning>
    <kRabbitHoleTuning>
      <EnvironmentMotiveScore value="0" />
      <MapTagFilterType value="Work">
        <!--Filter type for this maptag- should be some combination of work and activities. See MapTagFilterType in MapTagController.cs.-->
      </MapTagFilterType>
      <CameraPitchOnRabbithole value="-35">
        <!--Sets the camera pitch whenever this rabbithole is the target of a lerp-->
      </CameraPitchOnRabbithole>
      <CameraZoomOnRabbithole value="100">
        <!--Sets the camera xoom whenever this rabbithole is the target of a lerp-->
      </CameraZoomOnRabbithole>
      <kCanInvestHere value="True">
        <!--Description:  Whether or not you can invest in this rabbithole, if it's false all the other investing tuning is ignored-->
      </kCanInvestHere>
      <kInvestCost value="35000">
        <!--Description:  How much it costs to invest part of the rabbithole-->
      </kInvestCost>
      <kBuyoutCost value="35000">
        <!--Description:  How much it costs to buy out the rabbithole-->
      </kBuyoutCost>
      <kInvestmentReturnPerWeek value="6500">
        <!--Description:  Amount of money per week that this rabbithole makes at the investment level-->
      </kInvestmentReturnPerWeek>
      <kBuyoutReturnPerWeek value="14000">
        <!--Description:  Money the rabbithole makes per week when you buy it out-->
      </kBuyoutReturnPerWeek>
      <kInvestmentMaxHoldingAmount value="14000">
        <!--Description:  Max amount the rabbithole can hold (from investments) when youre at the investment level-->
      </kInvestmentMaxHoldingAmount>
      <kBuyoutMaxHoldingAmount value="1000000">
        <!--Description:  Max amount the rabbithole can hold (from investments) when it's bought out-->
      </kBuyoutMaxHoldingAmount>
      <kNpcExitFreq value="10">
        <!--Range:  ???  Description:  Exit frequency in minutes for NPC sims leaving this rabbit hole.-->
      </kNpcExitFreq>
      <kDaytimeLightSunriseDelta value="0">
        <!--Hour delta from world defined sunrise at which daytime rabbithole lights are used. 24 or greater means no visual states are used.-->
      </kDaytimeLightSunriseDelta>
      <kNighttimeLightSunsetDelta value="1">
        <!--Hour delta from world defined sunset at which nighttime rabbithole lights are used. 24 or greater means no visual states are used.-->
      </kNighttimeLightSunsetDelta>
      <kPreventLotPurchase value="True">
        <!--if you can't purchase the lot if it has a rabbithole of this type on it-->
      </kPreventLotPurchase>
      <kHasMaptag value="True">
        <!--if it has a maptag-->
      </kHasMaptag>
      <kReplaceLotMaptag value="True">
        <!--if replaces the lot maptag-->
      </kReplaceLotMaptag>
    </kRabbitHoleTuning>
    <kCostOfCookingClass value="400">
      <!--Type : Integer  Description:  The cost of the Alchemy / Cooking class at this rabbithole.-->
    </kCostOfCookingClass>
    <kLengthOfCookingClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the Cooking class.-->
    </kLengthOfCookingClass>
    <kCostOfGuitarClass value="400">
      <!--Type : Integer  Description:  The cost of the Alchemy / Guitar class at this rabbithole.-->
    </kCostOfGuitarClass>
    <kLengthOfGuitarClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the Guitar class.-->
    </kLengthOfGuitarClass>
    <kCostOfPaintingClass value="400">
      <!--Type : Integer  Description:  The cost of the Alchemy / Painting class at this rabbithole.-->
    </kCostOfPaintingClass>
    <kLengthOfPaintingClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the Painting class.-->
    </kLengthOfPaintingClass>
    <kCostOfWritingClass value="400">
      <!--Type : Integer  Description:  The cost of the writing class at this rabbithole.-->
    </kCostOfWritingClass>
    <kLengthOfWritingClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the writing class.-->
    </kLengthOfWritingClass>
    <kCostOfDrumClass value="400">
      <!--Type : Integer  Description:  The cost of the Drum class at this rabbithole.-->
    </kCostOfDrumClass>
    <kLengthOfDrumClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the Drum class.-->
    </kLengthOfDrumClass>
    <kCostOfBassGuitarClass value="400">
      <!--Type : Integer  Description:  The cost of the BassGuitar class at this rabbithole.-->
    </kCostOfBassGuitarClass>
    <kLengthOfBassGuitarClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the BassGuitar class.-->
    </kLengthOfBassGuitarClass>
    <kCostOfPianoClass value="400">
      <!--Type : Integer  Description:  The cost of the Piano class at this rabbithole.-->
    </kCostOfPianoClass>
    <kLengthOfPianoClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the Piano class.-->
    </kLengthOfPianoClass>
    <kCostOfStreetArtClass value="400">
      <!--Type : Integer  Description:  The cost of the StreetArt class at this rabbithole.-->
    </kCostOfStreetArtClass>
    <kLengthOfStreetArtClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the StreetArt class.-->
    </kLengthOfStreetArtClass>
    <kDegreesForStudy value="FineArts">
      <!--Array of AcademicDegreeNames that allow you to study in this rabbithole-->
    </kDegreesForStudy>
    <kCostOfBartendingClass value="400">
      <!--Type : Integer  Description:  The cost of the Bartending (Mixology) class at this rabbithole.-->
    </kCostOfBartendingClass>
    <kLengthOfBartendingClass value="60">
      <!--Type : Float  Description:  The length of time in Sim Minutes to complete the Bartending (Mixology) class.-->
    </kLengthOfBartendingClass>
  </Current_Tuning>
</base>